C51 COMPILER V9.60.0.0   DISPLAY                                                           09/23/2024 14:20:12 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DISPLAY
OBJECT MODULE PLACED IN .\src\Display.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\hallgat
                    -o\Desktop\FodorT.FranciaCS.JK01.Display\src\Display.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZ
                    -Y(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\hallgato\Desktop\FodorT.FranciaCS.JK
                    -01.Display\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared/si8051Base;C:/SiliconLabs/Si
                    -mplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/EFM8BB1/inc) PRINT(.\src\Display.lst) COND PAGEWIDTH(120) PAGELENGT
                    -H(65) OBJECT(.\src\Display.OBJ)

line level    source

   1          #include <SI_EFM8BB1_Register_Enums.h>
   2          
   3          #include "Display.h"
   4          
   5          #define DECODER_A P1_B1
   6          #define DECODER_B P1_B2
   7          #define DECODER_C P0_B4
   8          
   9          void decoder_init(void)
  10          {
  11   1      
  12   1        /* Setting the pins to outputmode "push-pull" */
  13   1        P1MDOUT |= (1U << P0MDOUT_B1__SHIFT);
  14   1        P1MDOUT |= (1U << P0MDOUT_B2__SHIFT);
  15   1        P0MDOUT |= (1U << P0MDOUT_B4__SHIFT);
  16   1      
  17   1        DECODER_A = 0;
  18   1        DECODER_B = 0;
  19   1        DECODER_C = 0;
  20   1      }
  21          
  22          static const uint8_t BCD_CODES[11] = {
  23                0x3F, // 0
  24                0x06, // 1
  25                0x5B, // 2
  26                0x4F, // 3
  27                0x66, // 4
  28                0x6D, // 5
  29                0x7D, // 6
  30                0x07, // 7
  31                0x7F, // 8
  32                0x6F, // 9
  33          };
  34          
  35          #define DISP_CLK P0_B0
  36          #define DISP_DATA P0_B2
  37          #define DISP_OE_RCLK P0_B3
  38          
  39          void shift_register_init(void)
  40          {
  41   1        /* Setting the pins to outputmode "push-pull" */
  42   1        P0MDOUT |= (1U << P0MDOUT_B0__SHIFT);
  43   1        P0MDOUT |= (1U << P0MDOUT_B2__SHIFT);
  44   1        P0MDOUT |= (1U << P0MDOUT_B3__SHIFT);
  45   1      
  46   1        DISP_CLK = 0;
  47   1        DISP_DATA = 0;
  48   1        DISP_OE_RCLK = 1;
  49   1      }
  50          
  51          void select_display(uint8_t display_idx)
C51 COMPILER V9.60.0.0   DISPLAY                                                           09/23/2024 14:20:12 PAGE 2   

  52          {
  53   1          DISP_OE_RCLK = 1;
  54   1          switch(display_idx)
  55   1          {
  56   2            case 0:
  57   2            {
  58   3              DECODER_A = 0;
  59   3              DECODER_B = 0;
  60   3              break;
  61   3            }
  62   2            case 1:
  63   2            {
  64   3              DECODER_A = 1;
  65   3              DECODER_B = 0;
  66   3              break;
  67   3            }
  68   2            case 2:
  69   2            {
  70   3              DECODER_A = 0;
  71   3              DECODER_B = 1;
  72   3              break;
  73   3            }
  74   2            case 3:
  75   2            {
  76   3              DECODER_A = 1;
  77   3              DECODER_B = 1;
  78   3              break;
  79   3            }
  80   2          }
  81   1      }
  82          
  83          
  84          
  85          
  86          void send_to_shift_register (uint8_t value)
  87          {
  88   1        uint8_t idx;
  89   1        uint8_t bcd_code = BCD_CODES[value];
  90   1        for (idx = 0; idx < 8; idx++)
  91   1         {
  92   2              DISP_DATA = ((~(bcd_code) >> (7 - idx)) & 1U); //getting the bits 1-by-1 from THE MSB
  93   2              DISP_CLK = 1; //rising edge
  94   2              DISP_CLK = 0;
  95   2          }
  96   1          //Creating a clock pulse on the output enable line
  97   1          DISP_OE_RCLK = 0;
  98   1          DISP_OE_RCLK = 1; //rising edge for RCLK
  99   1          DISP_OE_RCLK = 0; //reset the data line
 100   1      }
 101          
 102          #define TEN_POW_3 ((uint16_t) 1000U)
 103          #define TEN_POW_2 ((uint16_t) 100U)
 104          #define TEN_POW_1 ((uint16_t) 10U)
 105          
 106          uint8_t get_digit_of_number(uint16_t number, uint8_t digit_index)
 107          {
 108   1          uint8_t value = 0U;
 109   1          switch (digit_index)
 110   1          {
 111   2            case 0:
 112   2            {
 113   3              value = (uint8_t) (number / TEN_POW_3);
 114   3              break;
C51 COMPILER V9.60.0.0   DISPLAY                                                           09/23/2024 14:20:12 PAGE 3   

 115   3            }
 116   2            case 1:
 117   2            {
 118   3              value = (uint8_t) ((number % TEN_POW_3) / TEN_POW_2);
 119   3              break;
 120   3            }
 121   2            case 2:
 122   2            {
 123   3              value = (uint8_t) ((number % TEN_POW_2) / TEN_POW_1);
 124   3              break;
 125   3            }
 126   2            case 3:
 127   2            {
 128   3              value =  (uint8_t) (number % TEN_POW_1);
 129   3              break;
 130   3            }
 131   2      
 132   2          }
 133   1      
 134   1          return value;
 135   1      }
 136          
 137          void get_digits_of_number(uint16_t number, uint8_t digit_array[4])
 138          {
 139   1        digit_array[3] = number % 10;
 140   1        number /= 10;
 141   1        digit_array[2] = number % 10;
 142   1        number /= 10;
 143   1        digit_array[1] = number % 10;
 144   1        number /= 10;
 145   1        digit_array[0] = number % 10;
 146   1      }
 147          
 148          
 149          
 150          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    323    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
