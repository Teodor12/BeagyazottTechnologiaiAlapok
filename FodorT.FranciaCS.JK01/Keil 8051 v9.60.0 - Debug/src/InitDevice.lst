C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/25/2024 16:08:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Teodor\
                    -Desktop\FodorT.FranciaCS.JK01\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OP
                    -TIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Teodor\Desktop\FodorT.FranciaCS.JK01\inc;C:
                    -/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5
                    -/developer/sdks/8051/v4.2.5//Device/EFM8BB1/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.
                    -\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        WDT_0_enter_DefaultMode_from_RESET ();
  27   1        PORTS_1_enter_DefaultMode_from_RESET ();
  28   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  29   1        CLOCK_0_enter_DefaultMode_from_RESET ();
  30   1        TIMER01_0_enter_DefaultMode_from_RESET ();
  31   1        TIMER16_2_enter_DefaultMode_from_RESET ();
  32   1        TIMER_SETUP_0_enter_DefaultMode_from_RESET ();
  33   1        EXTINT_0_enter_DefaultMode_from_RESET ();
  34   1        INTERRUPT_0_enter_DefaultMode_from_RESET ();
  35   1        // [Config Calls]$
  36   1      
  37   1      }
  38          
  39          extern void
  40          WDT_0_enter_DefaultMode_from_RESET (void)
  41          {
  42   1        // $[Watchdog Timer Init Variable Declarations]
  43   1        uint32_t i;
  44   1        bool ea;
  45   1        // [Watchdog Timer Init Variable Declarations]$
  46   1      
  47   1        // $[WDTCN - Watchdog Timer Control]
  48   1        // Deprecated
  49   1        // [WDTCN - Watchdog Timer Control]$
  50   1      
  51   1        // $[WDTCN_2 - Watchdog Timer Control]
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/25/2024 16:08:58 PAGE 2   

  52   1      
  53   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  54   1        WDTCN = 0xA5;
  55   1      
  56   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  57   1        for (i = 0; i < (2 * 3062500UL) / (10000 * 3); i++)
  58   1          {
  59   2            NOP ();
  60   2          }
  61   1      
  62   1        // Disable WDT
  63   1        ea = IE_EA;
  64   1        IE_EA = 0;
  65   1        WDTCN = 0xDE;
  66   1        WDTCN = 0xAD;
  67   1        IE_EA = ea;
  68   1      
  69   1        // [WDTCN_2 - Watchdog Timer Control]$
  70   1      
  71   1      }
  72          
  73          extern void
  74          PORTS_1_enter_DefaultMode_from_RESET (void)
  75          {
  76   1        // $[P1 - Port 1 Pin Latch]
  77   1        // [P1 - Port 1 Pin Latch]$
  78   1      
  79   1        // $[P1MDOUT - Port 1 Output Mode]
  80   1        /***********************************************************************
  81   1         - P1.0 output is open-drain
  82   1         - P1.1 output is open-drain
  83   1         - P1.2 output is open-drain
  84   1         - P1.3 output is open-drain
  85   1         - P1.4 output is push-pull
  86   1         - P1.5 output is open-drain
  87   1         - P1.6 output is open-drain
  88   1         - P1.7 output is open-drain
  89   1         ***********************************************************************/
  90   1        P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
  91   1            | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__PUSH_PULL
  92   1            | P1MDOUT_B5__OPEN_DRAIN | P1MDOUT_B6__OPEN_DRAIN
  93   1            | P1MDOUT_B7__OPEN_DRAIN;
  94   1        // [P1MDOUT - Port 1 Output Mode]$
  95   1      
  96   1        // $[P1MDIN - Port 1 Input Mode]
  97   1        // [P1MDIN - Port 1 Input Mode]$
  98   1      
  99   1        // $[P1SKIP - Port 1 Skip]
 100   1        // [P1SKIP - Port 1 Skip]$
 101   1      
 102   1        // $[P1MASK - Port 1 Mask]
 103   1        // [P1MASK - Port 1 Mask]$
 104   1      
 105   1        // $[P1MAT - Port 1 Match]
 106   1        // [P1MAT - Port 1 Match]$
 107   1      
 108   1      }
 109          
 110          extern void
 111          PBCFG_0_enter_DefaultMode_from_RESET (void)
 112          {
 113   1        // $[XBR2 - Port I/O Crossbar 2]
 114   1        /***********************************************************************
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/25/2024 16:08:58 PAGE 3   

 115   1         - Weak Pullups enabled 
 116   1         - Crossbar enabled
 117   1         ***********************************************************************/
 118   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 119   1        // [XBR2 - Port I/O Crossbar 2]$
 120   1      
 121   1        // $[PRTDRV - Port Drive Strength]
 122   1        // [PRTDRV - Port Drive Strength]$
 123   1      
 124   1        // $[XBR0 - Port I/O Crossbar 0]
 125   1        // [XBR0 - Port I/O Crossbar 0]$
 126   1      
 127   1        // $[XBR1 - Port I/O Crossbar 1]
 128   1        // [XBR1 - Port I/O Crossbar 1]$
 129   1      
 130   1      }
 131          
 132          extern void
 133          TIMER16_2_enter_DefaultMode_from_RESET (void)
 134          {
 135   1      
 136   1        // $[Timer Initialization]
 137   1        // Save Timer Configuration
 138   1        uint8_t TMR2CN0_TR2_save;
 139   1        TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 140   1        // Stop Timer
 141   1        TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 142   1        // [Timer Initialization]$
 143   1      
 144   1        // $[TMR2CN0 - Timer 2 Control]
 145   1        // [TMR2CN0 - Timer 2 Control]$
 146   1      
 147   1        // $[TMR2H - Timer 2 High Byte]
 148   1        // [TMR2H - Timer 2 High Byte]$
 149   1      
 150   1        // $[TMR2L - Timer 2 Low Byte]
 151   1        // [TMR2L - Timer 2 Low Byte]$
 152   1      
 153   1        // $[TMR2RLH - Timer 2 Reload High Byte]
 154   1        /***********************************************************************
 155   1         - Timer 2 Reload High Byte = 0xFF
 156   1         ***********************************************************************/
 157   1        TMR2RLH = (0xFF << TMR2RLH_TMR2RLH__SHIFT);
 158   1        // [TMR2RLH - Timer 2 Reload High Byte]$
 159   1      
 160   1        // $[TMR2RLL - Timer 2 Reload Low Byte]
 161   1        /***********************************************************************
 162   1         - Timer 2 Reload Low Byte = 0xFC
 163   1         ***********************************************************************/
 164   1        TMR2RLL = (0xFC << TMR2RLL_TMR2RLL__SHIFT);
 165   1        // [TMR2RLL - Timer 2 Reload Low Byte]$
 166   1      
 167   1        // $[TMR2CN0]
 168   1        /***********************************************************************
 169   1         - Start Timer 2 running
 170   1         ***********************************************************************/
 171   1        TMR2CN0 |= TMR2CN0_TR2__RUN;
 172   1        // [TMR2CN0]$
 173   1      
 174   1        // $[Timer Restoration]
 175   1        // Restore Timer Configuration
 176   1        TMR2CN0 |= TMR2CN0_TR2_save;
 177   1        // [Timer Restoration]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/25/2024 16:08:58 PAGE 4   

 178   1      
 179   1      }
 180          
 181          extern void
 182          PCA_0_enter_DefaultMode_from_RESET (void)
 183          {
 184   1        // $[PCA Off]
 185   1        PCA0CN0_CR = PCA0CN0_CR__STOP;
 186   1        // [PCA Off]$
 187   1      
 188   1        // $[PCA0MD - PCA Mode]
 189   1        // [PCA0MD - PCA Mode]$
 190   1      
 191   1        // $[PCA0CENT - PCA Center Alignment Enable]
 192   1        // [PCA0CENT - PCA Center Alignment Enable]$
 193   1      
 194   1        // $[PCA0CLR - PCA Comparator Clear Control]
 195   1        // [PCA0CLR - PCA Comparator Clear Control]$
 196   1      
 197   1        // $[PCA0L - PCA Counter/Timer Low Byte]
 198   1        // [PCA0L - PCA Counter/Timer Low Byte]$
 199   1      
 200   1        // $[PCA0H - PCA Counter/Timer High Byte]
 201   1        // [PCA0H - PCA Counter/Timer High Byte]$
 202   1      
 203   1        // $[PCA0POL - PCA Output Polarity]
 204   1        // [PCA0POL - PCA Output Polarity]$
 205   1      
 206   1        // $[PCA0PWM - PCA PWM Configuration]
 207   1        // [PCA0PWM - PCA PWM Configuration]$
 208   1      
 209   1        // $[PCA On]
 210   1        PCA0CN0_CR = PCA0CN0_CR__RUN;
 211   1        // [PCA On]$
 212   1      
 213   1      }
 214          
 215          extern void
 216          TIMER_SETUP_0_enter_DefaultMode_from_RESET (void)
 217          {
 218   1        // $[CKCON0 - Clock Control 0]
 219   1        // [CKCON0 - Clock Control 0]$
 220   1      
 221   1        // $[TMOD - Timer 0/1 Mode]
 222   1        /***********************************************************************
 223   1         - Mode 2, 8-bit Counter/Timer with Auto-Reload
 224   1         - Mode 2, 8-bit Counter/Timer with Auto-Reload
 225   1         - Timer Mode
 226   1         - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 227   1         - Timer Mode
 228   1         - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 229   1         ***********************************************************************/
 230   1        TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 231   1            | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 232   1        // [TMOD - Timer 0/1 Mode]$
 233   1      
 234   1        // $[TCON - Timer 0/1 Control]
 235   1        /***********************************************************************
 236   1         - INT0 is edge triggered
 237   1         - Start Timer 0 running
 238   1         - Start Timer 1 running
 239   1         ***********************************************************************/
 240   1        TCON |= TCON_IT0__EDGE | TCON_TR0__RUN | TCON_TR1__RUN;
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/25/2024 16:08:58 PAGE 5   

 241   1        // [TCON - Timer 0/1 Control]$
 242   1      
 243   1      }
 244          
 245          extern void
 246          INTERRUPT_0_enter_DefaultMode_from_RESET (void)
 247          {
 248   1        // $[EIE1 - Extended Interrupt Enable 1]
 249   1        // [EIE1 - Extended Interrupt Enable 1]$
 250   1      
 251   1        // $[EIP1 - Extended Interrupt Priority 1]
 252   1        // [EIP1 - Extended Interrupt Priority 1]$
 253   1      
 254   1        // $[IE - Interrupt Enable]
 255   1        /***********************************************************************
 256   1         - Enable each interrupt according to its individual mask setting
 257   1         - Enable interrupt requests generated by the INT0 input
 258   1         - Disable external interrupt 1
 259   1         - Disable all SPI0 interrupts
 260   1         - Enable interrupt requests generated by the TF0 flag
 261   1         - Enable interrupt requests generated by the TF1 flag
 262   1         - Enable interrupt requests generated by the TF2L or TF2H flags
 263   1         - Disable UART0 interrupt
 264   1         ***********************************************************************/
 265   1        IE = IE_EA__ENABLED | IE_EX0__ENABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 266   1            | IE_ET0__ENABLED | IE_ET1__ENABLED | IE_ET2__ENABLED | IE_ES0__DISABLED;
 267   1        // [IE - Interrupt Enable]$
 268   1      
 269   1        // $[IP - Interrupt Priority]
 270   1        // [IP - Interrupt Priority]$
 271   1      
 272   1      }
 273          
 274          extern void
 275          CLOCK_0_enter_DefaultMode_from_RESET (void)
 276          {
 277   1      
 278   1        // $[CLKSEL - Clock Select]
 279   1        // [CLKSEL - Clock Select]$
 280   1      
 281   1      }
 282          
 283          extern void
 284          EXTINT_0_enter_DefaultMode_from_RESET (void)
 285          {
 286   1        // $[IT01CF - INT0/INT1 Configuration]
 287   1        /***********************************************************************
 288   1         - INT0 input is active high
 289   1         - Select P0.6
 290   1         - INT1 input is active low
 291   1         - Select P0.0
 292   1         ***********************************************************************/
 293   1        IT01CF = IT01CF_IN0PL__ACTIVE_HIGH | IT01CF_IN0SL__P0_6
 294   1            | IT01CF_IN1PL__ACTIVE_LOW | IT01CF_IN1SL__P0_0;
 295   1        // [IT01CF - INT0/INT1 Configuration]$
 296   1      
 297   1      }
 298          
 299          extern void
 300          TIMER01_0_enter_DefaultMode_from_RESET (void)
 301          {
 302   1        // $[Timer Initialization]
 303   1        //Save Timer Configuration
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/25/2024 16:08:58 PAGE 6   

 304   1        uint8_t TCON_save;
 305   1        TCON_save = TCON;
 306   1        //Stop Timers
 307   1        TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 308   1      
 309   1        // [Timer Initialization]$
 310   1      
 311   1        // $[TH0 - Timer 0 High Byte]
 312   1        /***********************************************************************
 313   1         - Timer 0 High Byte = 0x01
 314   1         ***********************************************************************/
 315   1        TH0 = (0x01 << TH0_TH0__SHIFT);
 316   1        // [TH0 - Timer 0 High Byte]$
 317   1      
 318   1        // $[TL0 - Timer 0 Low Byte]
 319   1        // [TL0 - Timer 0 Low Byte]$
 320   1      
 321   1        // $[TH1 - Timer 1 High Byte]
 322   1        /***********************************************************************
 323   1         - Timer 1 High Byte = 0x01
 324   1         ***********************************************************************/
 325   1        TH1 = (0x01 << TH1_TH1__SHIFT);
 326   1        // [TH1 - Timer 1 High Byte]$
 327   1      
 328   1        // $[TL1 - Timer 1 Low Byte]
 329   1        // [TL1 - Timer 1 Low Byte]$
 330   1      
 331   1        // $[Timer Restoration]
 332   1        //Restore Timer Configuration
 333   1        TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 334   1      
 335   1        // [Timer Restoration]$
 336   1      
 337   1      }
 338          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    170    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
